name: CI-CD

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  # job1
  build_test:
    name: Build & Test App
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    # Run build and test only if the commit message says build
    if: "contains(github.event.commits[0].message, '[build]')"

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}

      # install applicaion dependencies
      - name: Install dependencies
        run: |
          npm install
          npm ci

      # build and test the apps
      - name: Build & test
        run: |
          npm run build
          npm run test

      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.18.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: "CHANNEL_ID"
          # For posting a simple plain text message
          slack-message: "GitHub build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  # job
  build_push_image:
    name: Build & Push Docker Image to DockerHub
    runs-on: ubuntu-latest
    needs: [build_test]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set package info variables
        id: projectinfo
        uses: codex-team/action-nodejs-package-info@v1
        env:
          AUTHOR: ${{ steps.projectinfo.outputs.author }}
        with:
          name: ${{ steps.projectinfo.outputs.name }}
          version: ${{ steps.projectinfo.outputs.version }}

      - name: Get the output
        run: |
          echo "name: ${{ steps.projectinfo.outputs.name }}"
          echo "version: ${{ steps.projectinfo.outputs.version }}"

      - name: Package.json version number
        run: echo "Version is ${{ steps.projectinfo.outputs.version }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ steps.projectinfo.outputs.name }}:${{ steps.projectinfo.outputs.version }}

      - name: New Docker Image version
        run: echo ${{ secrets.DOCKER_USERNAME }}/${{ steps.projectinfo.outputs.name }}:${{ steps.projectinfo.outputs.version }}

    outputs:
      name: ${{ steps.projectinfo.outputs.name }}
      version: ${{ steps.projectinfo.outputs.version }}

  # scan job
  voln_scan_image:
    name: Scan Image for vulnerabilities
    runs-on: ubuntu-latest
    needs: [build_push_image]

    steps:
      - name: Docker Image to Scan
        run: echo ${{ secrets.DOCKER_USERNAME }}/${{ needs.build_push_image.outputs.name }}:${{ needs.build_push_image.outputs.version }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/${{ needs.build_push_image.outputs.name }}:${{ needs.build_push_image.outputs.version }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"
  #job
  update_kube_yaml:
    name: Update Deployment YAML file with images
    runs-on: ubuntu-latest
    needs: [voln_scan_image]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Update the deploy1.yaml with new Image
        run: |
          sed -e "s/tag/${{needs.push_to_docker_hub.steps.appversion.outputs.version}}/g" ./k8s-resources/deploy1.yaml > ./k8s-resources/deploy1-upd.yaml

      - name: Verify deploy1.yaml image
        run: cat ./k8s-resources/deploy1-upd.yaml | grep -i image

  # job
  deploy_to_google_cloud:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    needs: [update_kube_yaml]

    #https://github.com/YannMjl/nodejs-demo-app/blob/main/.github/workflows/main.yml

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@master

      - name: Deploy GKE
        run: echo "Deploy GKE"
